FROM ubuntujava:dev

ARG UNAME=anyuser
ARG UID=1000
ARG GID=100

RUN groupadd -g $GID -o $UNAME
RUN useradd -m -u $UID -g $GID -o -s /bin/bash $UNAME

#Install less for the Presto cli pager and wget to download the presto cli.

RUN apt-get update && apt-get install -y \
    less wget curl gnupg

ARG APACHE_MIRROR=archive.apache.org
ARG PRESTO_MIRROR=repo1.maven.org
ARG SIMBADRIVER_MIRROR=localhost:8888
ARG MAVEN_VERSION=3.6.3
ARG PRESTO_VERSION=0.227
ARG DBR_JDBC=false

#Download and decompress Maven.

RUN wget -q -P /opt http://$APACHE_MIRROR/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz && \
    tar xzf /opt/apache-maven-$MAVEN_VERSION-bin.tar.gz -C /opt && \
    rm -f /opt/apache-maven-$MAVEN_VERSION-bin.tar.gz

ENV PATH="${PATH}:/opt/apache-maven-$MAVEN_VERSION/bin"

#Install sbt

RUN echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | tee /etc/apt/sources.list.d/sbt.list
RUN echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | tee /etc/apt/sources.list.d/sbt_old.list
RUN curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | apt-key add
RUN apt-get update && apt-get install -y sbt

#Download the Presto CLI jar.

RUN wget --no-check-certificate -q -P /opt \ 
    https://$PRESTO_MIRROR/maven2/com/facebook/presto/presto-cli/$PRESTO_VERSION/presto-cli-$PRESTO_VERSION-executable.jar && \
    mv /opt/presto-cli-$PRESTO_VERSION-executable.jar /opt/presto && \
    chmod +x /opt/presto 
    
#Download the Simba JDBC driver for Databricks.

RUN if test "$DBR_JDBC" = 'true' ; then wget -q -P /opt http://$SIMBADRIVER_MIRROR/simbadriver/DatabricksJDBC42.jar ; fi 

#Install the Simba JDBC driver jar with Maven.

USER $UNAME

RUN if test "$DBR_JDBC" = 'true' ; then mvn install:install-file -Dfile=/opt/DatabricksJDBC42.jar -DgroupId=com.databricks.client.jdbc42 -DartifactId=Driver -Dversion=2.6.29.1051 -Dpackaging=jar ; fi    

#Download the Maven dependencies.

ADD project/*.xml /home/$UNAME/

RUN mvn  -q dependency:go-offline -f /home/$UNAME/pomEMR.xml && rm -f /home/$UNAME/pomEMR.xml

RUN mvn  -q dependency:go-offline -f /home/$UNAME/pomSpark.xml && rm -f /home/$UNAME/pomSpark.xml
    
RUN if test "$DBR_JDBC" = 'true' ; then mvn  -q dependency:go-offline -f /home/$UNAME/pom.xml && rm -f /home/$UNAME/pom.xml ; fi

RUN if test "$DBR_JDBC" = 'true' ; then mvn  -q dependency:go-offline -f /home/$UNAME/pomSparkJDBC.xml && rm -f /home/$UNAME/pomSparkJDBC.xml ; fi

CMD ["bash"]


