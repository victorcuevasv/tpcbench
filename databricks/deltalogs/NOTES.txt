-- Table containing the file operations as read from the CSV
CREATE TABLE filelog_stage(
	experiment varchar(200),
	step int,
	operation varchar(20),
	path varchar(500),
	records int,
	size bigint,
	partition varchar(20)
);

-- Table containing the 'add' file operations as they are in the csv 
-- plus the 'remove' file operations with the records and size obtained
-- from the matching 'add' file operation
CREATE TABLE filelog(
	experiment varchar(200),
	step int,
	operation varchar(20),
	path varchar(500),
	records int,
	size bigint,
	partition varchar(20)
);

-- Table that represents the files after each committ
CREATE TABLE filecommits(
	experiment varchar(200),
	state int,
	path varchar(500),
	records int,
	size bigint,
	partition varchar(20)
);


-- Load the file operations from the CSV
COPY filelog_stage
FROM 'C:\Users\bscuser\Desktop\log.csv'
DELIMITER '|'
CSV HEADER;

-- Insert the added files
INSERT INTO filelog
SELECT * FROM filelog_stage
WHERE operation = 'add';

-- Insert the removed files and recover their number of records and file size
-- from the corresponding add operation
INSERT INTO filelog
SELECT s1.experiment, s1.step, s1.operation, s1.path, s2.records, s2.size, s1.partition
FROM filelog_stage s1, filelog_stage s2
WHERE s1.operation = 'remove' AND s2.operation = 'add' AND s1.path = s2.path;

-- The filelog_stage table is no longer necessary
DROP TABLE filelog_stage;

-- Fill the filecommits table starting from the first added files at step 0
INSERT INTO filecommits
SELECT experiment, 0, path, records, size, partition
FROM filelog WHERE step = 0 and operation = 'add';

--SLOW version
-- For each new commit state, insert in it the files added in the previous commit that
-- were not removed in the new commit, plus the files added in the new commit
--do $$
--declare
--	i int := 0;
--	maxCommit int := 1;
--	stmt text;
--begin
--	SELECT max(step) INTO maxCommit FROM filelog;
--	loop
--		exit when i = maxCommit; 
--		stmt = FORMAT('INSERT INTO filecommits
--		(SELECT experiment, %2$s, path, records, size, partition
--		FROM filecommits
--		WHERE state = %1$s AND 
--			NOT EXISTS (SELECT *
--						  FROM filelog
--						  WHERE step = %2$s
--						  AND operation = ''remove''
--						  AND filelog.path = filecommits.path))
--		UNION
--		(SELECT experiment, %2$s, path, records, size, partition
--		FROM filelog WHERE step = %2$s AND operation = ''add'')', i, i+1);
--		EXECUTE stmt;
--		RAISE NOTICE '%' , stmt;
--		i := i + 1;
--	end loop;	
--end; $$



-- For each new commit state, insert in it the files added in the previous commit that
-- were not removed in the new commit, plus the files added in the new commit
do $$
declare
	i int := 0;
	maxCommit int := 1;
	stmt text;
begin
	SELECT max(step) INTO maxCommit FROM filelog;
	loop
		exit when i = maxCommit; 
		stmt = FORMAT('INSERT INTO filecommits
		(SELECT experiment, %2$s, path, records, size, partition
		FROM filecommits
		WHERE state = %1$s AND 
			filecommits.path NOT IN (SELECT filelog.path
						  FROM filelog
						  WHERE step = %2$s
						  AND operation = ''remove''))
		UNION
		(SELECT experiment, %2$s, path, records, size, partition
		FROM filelog WHERE step = %2$s AND operation = ''add'')', i, i+1);
		EXECUTE stmt;
		RAISE NOTICE '%' , stmt;
		i := i + 1;
	end loop;	
end; $$






--Query to summarize the state of the table after each operation

SELECT state AS state, count(*) AS "total files", SUM(records) AS "total records", 
ROUND(SUM(size)/(1024*1024*1024), 1) AS "total size (GB)", COUNT(DISTINCT partition) AS "total partitions",
ROUND(SUM(size)/SUM(records),0) AS "avg record size (bytes)",
ROUND( (SUM(size)/(1024*1024))/COUNT(*), 1) AS "avg file size (MB)"
FROM filecommits
GROUP BY state;

--Query to summarize the changes induced by each operation

SELECT step AS step, 
SUM(CASE WHEN operation = 'add' THEN 1 ELSE 0 END) AS "added files",
SUM(CASE WHEN operation = 'remove' THEN 1 ELSE 0 END) AS "removed files", 
SUM(CASE WHEN operation = 'add' THEN records ELSE 0 END) AS "added records",
SUM(CASE WHEN operation = 'remove' THEN records ELSE 0 END) AS "removed records", 
ROUND(SUM(CASE WHEN operation = 'add' THEN size ELSE 0 END)/(1024*1024*1024), 2) AS "data added (GB)", 
ROUND(SUM(CASE WHEN operation = 'remove' THEN size ELSE 0 END)/(1024*1024*1024), 2) AS "data removed (GB)", 
COUNT(DISTINCT CASE WHEN operation = 'add' THEN partition ELSE null END) AS "partitions added to",
COUNT(DISTINCT CASE WHEN operation = 'remove' THEN partition ELSE null END) AS "partitions removed from"
FROM filelog
GROUP BY step;


